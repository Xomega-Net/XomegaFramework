@* Copyright (c) 2022 Xomega.Net. All rights reserved. *@

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using System.Reflection
@using System.Threading
@using Xomega.Framework

@inherits XSfOptionsComponent<Header>

@if (IsVisible)
{
<div class="@Class">
    <SfTooltip Content="@ErrorsText" CssClass="@ErrorClass" OnOpen="OnTooltipOpen" Position="@TooltipPosition">
        <SfMultiSelect TValue="string[]" TItem="Header" Enabled="@(IsEditable)"
                       @ref="sfMS" @attributes="@AdditionalAttributes"
                       DataSource="AvailableItems" AllowFiltering="AllowFiltering" AllowCustomValue="AllowCustom"
                       Value="Values" ValueChanged="async (args) => await UpdatePropertyAsync(args)"
                       Placeholder="@PlaceholderText" FloatLabelType="@FloatLabelType" DelimiterChar="@Delimiter">
            <MultiSelectEvents TValue="string[]" TItem="Header"
                               Focus="() => OnFocus(null)" Blur="() => OnBlur(null)" />
            <MultiSelectFieldSettings Text="Text" Value="Id" GroupBy="@GroupByAttribute" />
            <MultiSelectTemplates GroupTemplate="GroupTemplate" ItemTemplate="ItemDisplayTemplate" />
        </SfMultiSelect>
    </SfTooltip>
</div>
}

@code
{
    [Parameter]
    public bool AllowCustom { get; set; }

    protected string[] Values => GetSelectedItems(ValueFormat.Transport).Cast<object>().Select(o => o.ToString()).ToArray();

    protected string Delimiter => Property?.DisplayListSeparator?.Trim() ?? ",";

    private SfMultiSelect<string[], Header> sfMS;

    protected override void OnPropertyChange(PropertyChangeEventArgs e)
    {
        base.OnPropertyChange(e);

        if (sfMS == null || Property == null || !e.Change.IncludesValidation()) return;

        // a hack to update validation class caused by SfMultiSelect's failure to properly update the set CssClass
        var cClassProp = sfMS.GetType().GetProperty("containerClass", BindingFlags.NonPublic | BindingFlags.Instance);
        string cClass = Convert.ToString(cClassProp.GetValue(sfMS));
        cClass = cClass.Replace(StateDescriptions.Valid, "");
        cClass = cClass.Replace(StateDescriptions.Invalid, "");
        cClass += " " + StateDescriptions.GetStateDescription(Property, PropertyChange.Validation, Row);
        cClassProp.SetValue(sfMS, cClass);
    }
}
