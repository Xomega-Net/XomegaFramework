@* Copyright (c) 2025 Xomega.Net. All rights reserved. *@

@using System.Collections
@using System.Linq
@using System.Resources

@inherits XOptionsComponent<object>

@inject ResourceManager resMgr

@if (IsVisible)
{
    <div class="@Class">
        @if (ShowLabel)
        {
            <label class="form-label @StateClass" accesskey="@GetAccessKey()" for="@ControlId">@GetLabel(Label)</label>
        }
        <select id="@ControlId"
        class="form-select @StateClass"
        disabled="@(!IsEditable)"
        multiple="@IsMultiValue" size="@Rows"
        value="@GetValue()"
        @onchange="@OnSelectionChanged"
        @onfocus="OnFocus"
        @onblur="OnBlur">
            @if (Property != null)
            {
                @if (!IsMultiValue && (IsNull || !IsRequired))
                {
                    <option selected="@IsNull" disabled="@IsRequired" value="">@(IsRequired ? DefaultSelectOption : Property.NullString)</option>
                }

                var value = Property.ResolveValue(Property.GetValue(ValueFormat.Internal, Row), ValueFormat.EditString);
                var itemValues = new ArrayList();
                @foreach (var i in Items)
                {
                    var val = Property.ValueToString(i, ValueFormat.EditString);
                    itemValues.Add(val);
                    <option selected="@IsSelected(value, val)" value="@val">@Template(i)</option>
                }

                if (!IsNull)
                {
                    var values = value as IList;
                    foreach (var v in values ?? new ArrayList() { value })
                    {
                        {
                            if (!itemValues.Contains(v))
                            {
                                <option selected="selected" disabled="disabled" value="@v">@Template(v)</option>
                            }
                        }
                    }
                }
            }
        </select>
        <div class="@ErrorsClass">@ErrorsText</div>
    </div>
}

@code {

    protected string GetValue() {
        var value = Property.ResolveValue(Property.GetValue(ValueFormat.Internal, Row), ValueFormat.EditString);
        if (value is IList lst)
        {
            var vl = new List<string>();
            foreach (var v in lst)
                vl.Add(Convert.ToString(v));
            return BindConverter.FormatValue(vl.ToArray())?.ToString();
        }
        else return Convert.ToString(value);
    }

    protected string DefaultSelectOption => string.Format((resMgr ?? Messages.ResourceManager)
        .GetString(Messages.Select_RequiredOption), Label);

    [Parameter] public int? Rows { get; set; }

    protected async Task OnSelectionChanged(ChangeEventArgs e)
    {
        var value = e.Value;
        if (value is string[] values)
            value = values.ToList();
        await UpdatePropertyAsync(value);
    }
}
