@* Copyright (c) 2021 Xomega.Net. All rights reserved. *@

@using System.Collections

@inherits XOptionsComponent<object>

@if (IsVisible)
{
    <select @ref="SelectList"
            @attributes="AdditionalAttributes"
            class="@CssClass"
            disabled="@(!IsEditable)"
            multiple="@IsMultiValue"
            @onchange="@OnSelectionChanged"
            @onfocus="OnFocus"
            @onblur="OnBlur"
            title="@ErrorsText">
        @if (Property != null)
        {
            @if (!IsMultiValue && (IsNull || !IsRequired))
            {
                <option selected="@IsNull" value="">@(IsRequired ? DefaultSelectOption : Property.NullString)</option>
            }

            var value = Property.ResolveValue(Property.InternalValue, ValueFormat.EditString);
            var itemValues = new ArrayList();
            @foreach (var i in Items)
            {
                var val = Property.ValueToString(i, ValueFormat.EditString);
                itemValues.Add(val);
                <option selected="@IsSelected(value, val)" value="@val">@Template(i)</option>
            }

            if (!IsNull)
            {
                var values = value as IList;
                foreach (var v in values ?? new ArrayList() { value })
                {
                    {
                        if (!itemValues.Contains(v))
                        {
                            <option selected="selected" disabled="disabled" value="@v">@Template(v)</option>
                        }
                    }
                }
            }
        }
    </select>
}

@code {

    public static string DefaultSelectOption = "Select...";

    protected ElementReference SelectList { get; set; }

    protected async Task OnSelectionChanged(ChangeEventArgs e)
    {
        if (IsMultiValue)
        {
            var value = await GetSelectedValues(SelectList);
            await UpdatePropertyAsync(value);
        }
        else await UpdatePropertyAsync(e.Value);
    }
}