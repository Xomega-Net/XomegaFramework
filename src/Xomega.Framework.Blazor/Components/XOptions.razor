@* Copyright (c) 2020 Xomega.Net. All rights reserved. *@

@using System.Collections

@inherits XOptionsComponent

@if (IsVisible)
{
    <div @attributes="AdditionalAttributes" class="@CssClass"
         disabled="@(!Property?.Editable)"
         title="@Property?.ErrorsText">
        @if (Property != null)
        {
            @if (ShowBlankOption && !IsMultiValue && !IsRequired && !IsNull)
            {
                <div>
                    <label>
                        <input type="@InputType" name="@OptionName" value="" checked="@IsNull"
                               @onchange="@OnValueChanged" disabled="@(!IsEditable)"
                               @onfocus="@OnFocus" @onblur="@OnBlur" />
                        @Property.NullString
                    </label>
                </div>
            }

            var value = Property.ResolveValue(Property.InternalValue, ValueFormat.EditString);
            var itemValues = new ArrayList();
            @foreach (var i in Items)
            {
                var val = Property.ValueToString(i, ValueFormat.EditString);
                itemValues.Add(val);
                <div>
                    <label>
                        <input type="@InputType" name="@OptionName" value="@val" checked="@IsSelected(value, val)"
                               @onchange="@(e => OnSelected(e, val))" disabled="@(!IsEditable)"
                               @onfocus="@OnFocus" @onblur="@OnBlur" />
                        @Template(i)
                    </label>
                </div>
            }

            if (!IsNull)
            {
                var values = value as IList;
                foreach (var v in values ?? new ArrayList() { value })
                {
                    if (!itemValues.Contains(v))
                    {
                        <div>
                            <label>
                                <input type="@InputType" name="@OptionName" value="@v" checked="checked" disabled="disabled" />
                                @Template(v)
                            </label>
                        </div>
                    }
                }
            }
        }
    </div>
}

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public bool ShowBlankOption { get; set; } = true;

    protected string OptionName => Name ?? Property?.Name;

    protected string InputType => IsMultiValue ? "checkbox" : "radio";

    protected void OnSelected(ChangeEventArgs e, object value)
    {
        if (IsMultiValue)
        {
            var val = Property.ResolveValue(Property.InternalValue, ValueFormat.EditString) as IList ?? new ArrayList();
            bool sel = (bool)e.Value;
            if (!sel) val.Remove(value);
            else if (!val.Contains(value))
                val.Add(value);
            UpdateProperty(val);
        }
        else UpdateProperty(e.Value);
    }
}