@* Copyright (c) 2021 Xomega.Net. All rights reserved. *@

<th class="sortable" @onclick="@OnHeaderClicked">@Text @if (SortField != null)
{
    <i class='sort-glyph fas @GetSortClasses()' aria-hidden='true' />
}</th>

@code {
    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public BaseProperty Property { get; set; }

    [Parameter]
    public string AscendingClass { get; set; } = "fa-long-arrow-alt-up";

    [Parameter]
    public string DescendingClass { get; set; } = "fa-long-arrow-alt-down";

    protected DataListObject List => Property?.GetParent() as DataListObject;

    protected ListSortCriteria SortCriteria => List?.SortCriteria;

    protected ListSortField SortField => Property == null ? null :
        SortCriteria?.Find(sf => sf.PropertyName == Property.Name);

    protected string GetSortClasses()
    {
        var sf = SortField;
        if (sf == null) return "";
        string cls = $"sort-{SortCriteria.IndexOf(sf) + 1} ";
        if (sf.SortDirection == ListSortDirection.Ascending)
            cls += AscendingClass;
        else if (sf.SortDirection == ListSortDirection.Descending)
            cls += DescendingClass;
        return cls;
    }

    protected void OnHeaderClicked(MouseEventArgs e)
    {
        var list = List;
        var sc = SortCriteria;
        var curSf = SortField;
        var newSf = new ListSortField()
        {
            PropertyName = Property.Name,
            SortDirection = ListSortDirection.Ascending
        };

        if (e.CtrlKey && curSf != null) sc.Remove(curSf);
        else if (e.CtrlKey && sc != null) sc.Add(newSf);
        else if (curSf != null)
            curSf.SortDirection = ListSortDirection.Toggle(curSf.SortDirection);
        else if (list != null)
            list.SortCriteria = new ListSortCriteria() { newSf };
        if (list != null) list.Sort();
    }
}