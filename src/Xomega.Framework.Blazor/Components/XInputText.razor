@* Copyright (c) 2020 Xomega.Net. All rights reserved. *@

@inherits XComponent

@using System.Linq
@inject IJSRuntime jsRuntime

@if (IsVisible)
{
    <input @ref="Input" type="@InputType" @attributes="AdditionalAttributes" class="@CssClass"
           readonly="@(!IsEditable)"
           maxlength="@MaxLength"
           value="@Value" @onchange="@OnValueChanged" @onblur="OnBlur"
           title="@Property?.ErrorsText" />
}

@code {

    protected ElementReference Input { get; set; }

    protected int? MaxLength => IsMultiValue ? null : Property?.Size;

    [Parameter]
    public bool Html5 { get; set; }

    protected string Value
    {
        get
        {
            if (Html5)
            {
                if (Property is DateProperty dp)
                    return dp.Value?.ToString("yyyy-MM-dd");
                else if (Property is DateTimeProperty dtp)
                    return dtp.Value?.ToString("yyyy-MM-ddTHH:mm");
            }
            return IsEditable ? Property.EditStringValue : Property.DisplayStringValue;
        }
    }

    protected string InputType
    {
        get
        {
            if (Html5)
            {
                if (Property is DateProperty) return "date";
                else if (Property is DateTimeProperty) return "datetime-local";
            }
            return "text";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Html5 && Input.Id != null && Property is DateTimeProperty dtp &&
            AdditionalAttributes != null && AdditionalAttributes.TryGetValue("class", out var cls))
        {
            var classes = cls?.ToString()?.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (classes != null && classes.Contains("date"))
                await SetupDatePicker(Input, dtp.Format);
        }

        // use jQuery UI autocomplete widget for enum properties
        if (Input.Id != null && Property is EnumProperty && Property.ItemsProvider != null)
        {
            var settings = new
            {
                items = new List<object>(),
                multivalue = Property.IsMultiValued,
                delimiter = Property.DisplayListSeparator
            };

            foreach (object i in Property.ItemsProvider(null))
            {
                settings.items.Add(new
                {
                    value = Property.ValueToString(i, ValueFormat.DisplayString),
                    editValue = Property.ValueToString(i, ValueFormat.EditString)
                });
            }

            await SetupAutoComplete(Input, settings);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected virtual async Task SetupDatePicker(ElementReference input, string format)
        => await jsRuntime.InvokeVoidAsync("xomegaControls.datePicker", input, format);

    protected virtual async Task SetupAutoComplete(ElementReference input, object settings)
        => await jsRuntime.InvokeVoidAsync("xomegaControls.autoComplete", input, null, settings);
}