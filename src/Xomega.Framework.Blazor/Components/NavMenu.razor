@* Copyright (c) 2023 Xomega.Net. All rights reserved. *@

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using System.Resources

@inject IAuthorizationPolicyProvider AuthPolicyProvider
@inject IAuthorizationService AuthService
@inject ResourceManager resources

@if (VisibleItems?.Count() > 0)
{
    <ul class="@ListClass list-unstyled" id="@Id">
        @foreach (var mi in VisibleItems)
        {
            <li class="nav-item @ItemClass @ButtonGroup(mi)">
                @if (!string.IsNullOrEmpty(mi.Href))
                {
                    <NavLink class="@LinkClass(mi)" href="@mi.Href" Match="NavLinkMatch.All">
                        <i class="@GetIconClass(mi)"></i>@GetText(mi)</NavLink>
                }
                @if (mi.Items?.Count() > 0)
                {
                    string id = GetId(mi);
                    string idRef = "#" + id;
                    @if (IsSubmenu && string.IsNullOrEmpty(mi.Href))
                    {
                        <a class="nav-link submenu-toggle">
                            <i class="@GetIconClass(mi)"></i>@GetText(mi)
                        </a>
                    }
                    else if (string.IsNullOrEmpty(mi.Href))
                    {
                        <NavLink class="nav-link dropdown-toggle" data-bs-toggle="@Toggle" href="@idRef">
                            <i class="@GetIconClass(mi)"></i>@GetText(mi)</NavLink>
                    }
                    else if (!IsSubmenu)
                    {
                        <a class="nav-link dropdown-toggle dropdown-toggle-split @ToggleCol" href="@idRef"
                                data-bs-toggle="@Toggle" data-bs-reference="parent">
                            <span class="visually-hidden">Toggle Dropdown</span>
                        </a>
                    }
                    <NavMenu Items="@mi.Items" Id="@id" Class="@ChildMenuClass" IsDropdown="@IsDropdown" DropdownClass="@DropdownClass"/>
                }
        </li>
        }
    </ul>
}

@code {

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsDropdown { get; set; }

    [Parameter]
    public string DropdownClass { get; set; }

    protected string ListClass => Class + (IsDropdown ? " navmenu-dropdown" : " navmenu");

    protected string ItemClass => IsDropdown ? "dropdown" : "";

    protected string ButtonGroup(MenuItem mi) => string.IsNullOrEmpty(mi.Href) || mi.Items?.Count() == 0 ? "" :
        IsDropdown ? "btn-group" : "row g-0";

    protected string Toggle => IsDropdown ? "dropdown" : "collapse";
    
    protected string ToggleCol => IsDropdown ? "" : "col"; // for sidebar split-menu

    protected string LinkClass(MenuItem mi) => "nav-link" + 
        (IsSubmenu && mi.Items?.Count() > 0 ? " submenu-toggle" : "") +
        (IsDropdown || mi.Items?.Count() == 0 ? "" : " col-auto"); // for sidebar split-menu

    protected string ChildMenuClass => IsDropdown ? "dropdown-menu " + (IsSubmenu ? "dropdown-submenu " : "") +  DropdownClass : "collapse";

    protected bool IsSubmenu => Class?.Contains("dropdown-menu") ?? false;

    protected virtual string GetId(MenuItem mi) => "mi_" + Guid.NewGuid().ToString("N");

    protected virtual string GetText(MenuItem mi) => mi.Text ?? resources.GetString(mi.ResourceKey);
    
    protected virtual string GetIconClass(MenuItem mi) => string.IsNullOrEmpty(mi.IconClass) ? "" : mi.IconClass + " me-2";

    [Parameter]
    public List<MenuItem> Items { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected List<MenuItem> VisibleItems;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        VisibleItems = new List<MenuItem>();
        if (Items != null)
        {
            foreach (var mi in Items)
            {
                if (await IsAuthorized(mi))
                    VisibleItems.Add(mi);
            }
        }
    }

    protected async Task<bool> IsAuthorized(MenuItem mi)
    {
        bool authorized = true;
        if (mi.AuthorizeData != null && AuthState != null)
        {
            var curAuthState = await AuthState;
            var policy = await AuthorizationPolicy.CombineAsync(AuthPolicyProvider, new[] { mi.AuthorizeData });
            var res = await AuthService.AuthorizeAsync(curAuthState.User, mi, policy);
            if (!res.Succeeded) authorized = false;
        }
        if (!authorized || !string.IsNullOrEmpty(mi.Href) || mi.Items == null || mi.Items.Count == 0)
            return authorized;

        foreach (var i in mi.Items)
            if (await IsAuthorized(i)) return true;

        return false;
    }
}