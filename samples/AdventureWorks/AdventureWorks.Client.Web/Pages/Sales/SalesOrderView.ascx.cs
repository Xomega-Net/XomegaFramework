//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "ASP.NET Details Pages" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ServiceModel;
using System.Web.UI;
using System.Web.UI.WebControls;
using AdventureWorks.Client.Objects;
using AdventureWorks.Services;
using Xomega.Framework;
using Xomega.Framework.Web;

namespace AdventureWorks.Client.Web
{
    public partial class SalesOrderView : DetailsView
    {
        #region Initialization/Activation

        protected SalesOrderObject obj;

        protected override void InitObjects(bool createNew)
        {
            dataObj = obj = GetObject<SalesOrderObject>(createNew);
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            SubscribeToChildEvents(uclSalesOrderDetailView);
            SubscribeToChildEvents(uclSalesOrderReasonView);
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            btnDelete.Enabled = !IsNew;
            lnkDetailNew.Enabled = !IsNew;
            lnkReasonNew.Enabled = !IsNew;
        }

        public override bool Activate(NameValueCollection query)
        {
            if (!base.Activate(query)) return false;
            obj.SalesOrderIdProperty.Required = !IsNew;
            return true;
        }

        #endregion

        #region Data loading

        protected override void LoadData()
        {
            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            ErrorList errorList = new ErrorList();
            try
            {
                SalesOrder_ReadOutput outRead;
                using (TimeTracker.ServiceCall)
                    outRead = svcSalesOrder.Read((int)obj.SalesOrderIdProperty.TransportValue);
                obj.FromDataContract(outRead);
            }
            catch(Exception ex)
            {
                errorList.MergeWith(ErrorList.FromException(ex));
            }
            try
            {
                IEnumerable<SalesOrderDetail_ReadListOutput> outDetail_ReadList;
                using (TimeTracker.ServiceCall)
                    outDetail_ReadList = svcSalesOrder.Detail_ReadList((int)obj.SalesOrderIdProperty.TransportValue);
                obj.DetailList.FromDataContract(outDetail_ReadList);
            }
            catch(Exception ex)
            {
                errorList.MergeWith(ErrorList.FromException(ex));
            }
            try
            {
                IEnumerable<SalesOrderReason_ReadListOutput> outReason_ReadList;
                using (TimeTracker.ServiceCall)
                    outReason_ReadList = svcSalesOrder.Reason_ReadList((int)obj.SalesOrderIdProperty.TransportValue);
                obj.ReasonList.FromDataContract(outReason_ReadList);
            }
            catch(Exception ex)
            {
                errorList.MergeWith(ErrorList.FromException(ex));
            }
            if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
            errors.List.DataSource = errorList.Errors;
            errors.List.DataBind();
            Page.DataBind();
        }

        #endregion

        #region Event Handlers

        protected virtual void btnSave_Click(object sender, EventArgs e)
        {
            obj.Validate(true);
            ErrorList valErr = obj.GetValidationErrors();
            errors.List.DataSource = valErr.Errors;
            errors.List.DataBind();
            if (valErr.HasErrors()) return;

            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            try
            {
                // for new objects create the object and store its key
                if (IsNew)
                {
                    SalesOrder_CreateInput inCreate = new SalesOrder_CreateInput();
                    obj.ToDataContract(inCreate);
                    SalesOrder_CreateOutput outCreate;
                    using (TimeTracker.ServiceCall)
                        outCreate = svcSalesOrder.Create(inCreate);
                    obj.FromDataContract(outCreate);
                    IsNew = false;
                }
                else
                {
                    SalesOrder_UpdateInput_Data inUpdate_Data = new SalesOrder_UpdateInput_Data();
                    obj.ToDataContract(inUpdate_Data);
                    using (TimeTracker.ServiceCall)
                        svcSalesOrder.Update((int)obj.SalesOrderIdProperty.TransportValue, inUpdate_Data);
                }
                obj.SetModified(false, true);
                OnSaved(EventArgs.Empty);
            }
            catch(Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            finally
            {
                if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
            }
        }

        protected virtual void btnDelete_Click(object sender, EventArgs e)
        {
            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            try
            {
                using (TimeTracker.ServiceCall)
                    svcSalesOrder.Delete((int)obj.SalesOrderIdProperty.TransportValue);
                obj.SetModified(false, true);
                OnDeleted(EventArgs.Empty);
                Hide();
            }
            catch(Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
        }

        #endregion

        #region Navigation

        protected virtual void lnkDetailDetails_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            DataListObject list = this.obj.DetailList;
            list.CurrentRow = int.Parse(e.CommandArgument.ToString());
            list.SelectRow(list.CurrentRow);
            query.Add("SalesOrderDetailId", this.obj.DetailList.SalesOrderDetailIdProperty.EditStringValue);
            query.Add(QuerySource, "lnkDetailDetails");
            NavigateTo(uclSalesOrderDetailView, query, ModePopup);
        }

        protected virtual void lnkDetailNew_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            query.Add(QueryAction, "create");
            query.Add("SalesOrderId", this.obj.SalesOrderIdProperty.EditStringValue);
            query.Add(QuerySource, "lnkDetailNew");
            NavigateTo(uclSalesOrderDetailView, query, ModePopup);
        }

        protected virtual void lnkReasonDetails_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            DataListObject list = this.obj.ReasonList;
            list.CurrentRow = int.Parse(e.CommandArgument.ToString());
            list.SelectRow(list.CurrentRow);
            query.Add("SalesOrderId", this.obj.SalesOrderIdProperty.EditStringValue);
            query.Add("SalesReasonId", this.obj.ReasonList.SalesReasonIdProperty.EditStringValue);
            query.Add(QuerySource, "lnkReasonDetails");
            NavigateTo(uclSalesOrderReasonView, query, ModePopup);
        }

        protected virtual void lnkReasonNew_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            query.Add(QueryAction, "create");
            query.Add("SalesOrderId", this.obj.SalesOrderIdProperty.EditStringValue);
            query.Add(QuerySource, "lnkReasonNew");
            NavigateTo(uclSalesOrderReasonView, query, ModePopup);
        }

        protected override void OnChildClosed(object childView, EventArgs e)
        {
            this.obj.DetailList.ClearSelectedRows();
            this.obj.DetailList.FireCollectionChanged();
            this.obj.ReasonList.ClearSelectedRows();
            this.obj.ReasonList.FireCollectionChanged();
            base.OnChildClosed(childView, e);
        }

        #endregion
    }
}