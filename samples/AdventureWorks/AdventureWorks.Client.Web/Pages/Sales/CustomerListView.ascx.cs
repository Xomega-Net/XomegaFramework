//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "ASP.NET Search Pages" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Web.UI.WebControls;
using AdventureWorks.Client.Objects;
using AdventureWorks.Services;
using Xomega.Framework;
using Xomega.Framework.Web;

namespace AdventureWorks.Client.Web
{
    public partial class CustomerListView : SearchView
    {
        protected CustomerList list;
        protected CustomerCriteria criteria;

        protected override void InitObjects(bool createNew)
        {
            listObj = list = GetList<CustomerList>(createNew);
            criteriaObj = criteria = GetCriteria<CustomerCriteria>(createNew);
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            uclAppliedCriteria.BindTo(list.AppliedCriteria);
        }

        public override bool Search(bool preserveSelection)
        {
            criteria.Validate(true);
            ErrorList valErr = criteria.GetValidationErrors();
            errors.List.DataSource = valErr.Errors;
            errors.List.DataBind();
            if (valErr.HasErrors()) return false;

            ICustomerService svcCustomer = DI.Resolve<ICustomerService>();
            try
            {
                Customer_ReadListInput_Criteria inReadList_Criteria = new Customer_ReadListInput_Criteria();
                criteria.ToDataContract(inReadList_Criteria);
                IEnumerable<Customer_ReadListOutput> outReadList;
                using (TimeTracker.ServiceCall)
                    outReadList = svcCustomer.ReadList(inReadList_Criteria);
                list.FromDataContract(outReadList, preserveSelection);
                list.AppliedCriteria = criteria.GetFieldCriteriaSettings();
                uclAppliedCriteria.BindTo(list.AppliedCriteria);
                return true;
            }
            catch (Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            finally
            {
                if (svcCustomer is IDisposable) ((IDisposable)svcCustomer).Dispose();
            }
            return false;
        }

        public virtual void lnkPermaLink_Click(object sender, EventArgs e)
        {
            Response.Redirect(WebUtil.AddQueryString(Request.RawUrl, criteria.ToNameValueCollection()));
        }
    }
}