//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "ASP.NET Details Pages" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ServiceModel;
using System.Web.UI;
using System.Web.UI.WebControls;
using AdventureWorks.Client.Objects;
using AdventureWorks.Services;
using Xomega.Framework;
using Xomega.Framework.Web;

namespace AdventureWorks.Client.Web
{
    public partial class SalesOrderDetailView : DetailsView
    {
        #region Initialization/Activation

        protected SalesOrderDetailObject obj;

        protected override void InitObjects(bool createNew)
        {
            dataObj = obj = GetObject<SalesOrderDetailObject>(createNew);
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            btnDelete.Enabled = !IsNew;
        }

        public override bool Activate(NameValueCollection query)
        {
            if (!base.Activate(query)) return false;
            obj.SalesOrderDetailIdProperty.Required = !IsNew;
            return true;
        }

        #endregion

        #region Data loading

        protected override void LoadData()
        {
            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            ErrorList errorList = new ErrorList();
            try
            {
                SalesOrderDetail_ReadOutput outDetail_Read;
                using (TimeTracker.ServiceCall)
                    outDetail_Read = svcSalesOrder.Detail_Read((int)obj.SalesOrderDetailIdProperty.TransportValue);
                obj.FromDataContract(outDetail_Read);
            }
            catch(Exception ex)
            {
                errorList.MergeWith(ErrorList.FromException(ex));
            }
            if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
            errors.List.DataSource = errorList.Errors;
            errors.List.DataBind();
            Page.DataBind();
        }

        #endregion

        #region Event Handlers

        protected virtual void btnSave_Click(object sender, EventArgs e)
        {
            obj.Validate(true);
            ErrorList valErr = obj.GetValidationErrors();
            errors.List.DataSource = valErr.Errors;
            errors.List.DataBind();
            if (valErr.HasErrors()) return;

            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            try
            {
                // for new objects create the object and store its key
                if (IsNew)
                {
                    SalesOrderDetail_CreateInput inDetail_Create = new SalesOrderDetail_CreateInput();
                    obj.ToDataContract(inDetail_Create);
                    SalesOrderDetail_CreateOutput outDetail_Create;
                    using (TimeTracker.ServiceCall)
                        outDetail_Create = svcSalesOrder.Detail_Create(inDetail_Create);
                    obj.FromDataContract(outDetail_Create);
                    IsNew = false;
                }
                else
                {
                    SalesOrderDetail_UpdateInput_Data inDetail_Update_Data = new SalesOrderDetail_UpdateInput_Data();
                    obj.ToDataContract(inDetail_Update_Data);
                    using (TimeTracker.ServiceCall)
                        svcSalesOrder.Detail_Update((int)obj.SalesOrderDetailIdProperty.TransportValue, inDetail_Update_Data);
                }
                obj.SetModified(false, true);
                OnSaved(EventArgs.Empty);
            }
            catch(Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            finally
            {
                if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
            }
        }

        protected virtual void btnDelete_Click(object sender, EventArgs e)
        {
            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            try
            {
                using (TimeTracker.ServiceCall)
                    svcSalesOrder.Detail_Delete((int)obj.SalesOrderDetailIdProperty.TransportValue);
                obj.SetModified(false, true);
                OnDeleted(EventArgs.Empty);
                Hide();
            }
            catch(Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
        }

        #endregion
    }
}