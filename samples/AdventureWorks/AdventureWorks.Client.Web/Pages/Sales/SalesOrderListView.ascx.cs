//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "ASP.NET Search Pages" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Web.UI.WebControls;
using AdventureWorks.Client.Objects;
using AdventureWorks.Services;
using Xomega.Framework;
using Xomega.Framework.Web;

namespace AdventureWorks.Client.Web
{
    public partial class SalesOrderListView : SearchView
    {
        protected SalesOrderList list;
        protected SalesOrderCriteriaCustomized criteria;

        protected override void InitObjects(bool createNew)
        {
            listObj = list = GetList<SalesOrderList>(createNew);
            criteriaObj = criteria = GetCriteria<SalesOrderCriteriaCustomized>(createNew);
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            SubscribeToChildEvents(uclSalesOrderView);
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            uclAppliedCriteria.BindTo(list.AppliedCriteria);
        }

        public override bool Search(bool preserveSelection)
        {
            criteria.Validate(true);
            ErrorList valErr = criteria.GetValidationErrors();
            errors.List.DataSource = valErr.Errors;
            errors.List.DataBind();
            if (valErr.HasErrors()) return false;

            ISalesOrderService svcSalesOrder = DI.Resolve<ISalesOrderService>();
            try
            {
                SalesOrder_ReadListInput_Criteria inReadList_Criteria = new SalesOrder_ReadListInput_Criteria();
                criteria.ToDataContract(inReadList_Criteria);
                IEnumerable<SalesOrder_ReadListOutput> outReadList;
                using (TimeTracker.ServiceCall)
                    outReadList = svcSalesOrder.ReadList(inReadList_Criteria);
                list.FromDataContract(outReadList, preserveSelection);
                list.AppliedCriteria = criteria.GetFieldCriteriaSettings();
                uclAppliedCriteria.BindTo(list.AppliedCriteria);
                return true;
            }
            catch (Exception ex)
            {
                errors.List.DataSource = ErrorList.FromException(ex).Errors;
                errors.List.DataBind();
            }
            finally
            {
                if (svcSalesOrder is IDisposable) ((IDisposable)svcSalesOrder).Dispose();
            }
            return false;
        }

        public virtual void lnkPermaLink_Click(object sender, EventArgs e)
        {
            Response.Redirect(WebUtil.AddQueryString(Request.RawUrl, criteria.ToNameValueCollection()));
        }

        protected virtual void lnkDetails_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            DataListObject list = this.list;
            list.CurrentRow = int.Parse(e.CommandArgument.ToString());
            list.SelectRow(list.CurrentRow);
            query.Add("SalesOrderId", this.list.SalesOrderIdProperty.EditStringValue);
            query.Add(QuerySource, "lnkDetails");
            NavigateTo(uclSalesOrderView, query, ModePopup);
        }

        protected virtual void lnkNew_Click(object sender, CommandEventArgs e)
        {
            NameValueCollection query = new NameValueCollection();
            query.Add(QueryAction, "create");
            query.Add(QuerySource, "lnkNew");
            NavigateTo(uclSalesOrderView, query, ModePopup);
        }
    }
}