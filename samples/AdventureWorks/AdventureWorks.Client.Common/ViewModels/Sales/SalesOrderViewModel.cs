//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "View Models" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using AdventureWorks.Client.Objects;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using Xomega.Framework;
using Xomega.Framework.Views;

namespace AdventureWorks.Client.ViewModels
{
    public partial class SalesOrderViewModel : DetailsViewModel
    {
        protected SalesOrderObject obj { get { return DetailsObject as SalesOrderObject; } }

        public SalesOrderViewModel(IServiceProvider sp) : base(sp)
        {
        }

        public override void Initialize()
        {
            base.Initialize();
            DetailsObject = ServiceProvider.GetService<SalesOrderObject>();
        }

        #region Link lnkCustomerLookupLookUp

        public virtual NameValueCollection lnkCustomerLookupLookUp_Params()
        {
            NameValueCollection query = new NameValueCollection();
            query.Add(ViewParams.Action.Param, ViewParams.Action.Select);
            query.Add(ViewParams.SelectionMode.Param, ViewParams.SelectionMode.Single);
            query.Add("StoreNameOperator", "CONT");
            query.Add("StoreName", this.obj.CustomerObject.LookupObject.StoreNameProperty.EditStringValue);
            query.Add("PersonNameOperator", "CONT");
            query.Add("PersonName", this.obj.CustomerObject.LookupObject.PersonNameProperty.EditStringValue);
            query.Add(ViewParams.Mode.Param, ViewParams.Mode.Popup);
            query.Add(ViewParams.QuerySource, "lnkCustomerLookupLookUp");
            return query;
        }

        public virtual void lnkCustomerLookupLookUp_Command(IView tgtView, IView curView)
        {
            NameValueCollection query = lnkCustomerLookupLookUp_Params();
            ViewModel tgtModel = ServiceProvider.GetService<CustomerListViewModel>();
            NavigateTo(tgtModel, tgtView, query, this, curView);
        }

        public virtual bool lnkCustomerLookupLookUp_Enabled()
        {
            return true;
        }

        protected virtual void lnkCustomerLookupLookUp_HandleResult(object sender, List<DataRow> selectedRows)
        {
            if (selectedRows == null || selectedRows.Count != 1) return;
            DataRow row = selectedRows[0];
            this.obj.CustomerObject.CustomerIdProperty.SetValue(DataRow.GetValue(row, CustomerList.CustomerId));
            this.obj.CustomerObject.StoreIdProperty.SetValue(DataRow.GetValue(row, CustomerList.StoreId));
            this.obj.CustomerObject.StoreNameProperty.SetValue(DataRow.GetValue(row, CustomerList.StoreName));
            this.obj.CustomerObject.PersonIdProperty.SetValue(DataRow.GetValue(row, CustomerList.PersonId));
            this.obj.CustomerObject.PersonNameProperty.SetValue(DataRow.GetValue(row, CustomerList.PersonName));
            this.obj.CustomerObject.AccountNumberProperty.SetValue(DataRow.GetValue(row, CustomerList.AccountNumber));
            this.obj.CustomerObject.TerritoryIdProperty.SetValue(DataRow.GetValue(row, CustomerList.TerritoryId));
        }
        #endregion

        #region Link lnkDetailDetails

        public virtual NameValueCollection lnkDetailDetails_Params(int row)
        {
            NameValueCollection query = new NameValueCollection();
            DataListObject list = this.obj.DetailList;
            list.CurrentRow = row;
            query.Add("SalesOrderDetailId", this.obj.DetailList.SalesOrderDetailIdProperty.EditStringValue);
            query.Add(ViewParams.Mode.Param, ViewParams.Mode.Popup);
            query.Add(ViewParams.QuerySource, "lnkDetailDetails");
            return query;
        }

        public virtual void lnkDetailDetails_Command(IView tgtView, IView curView, int row)
        {
            NameValueCollection query = lnkDetailDetails_Params(row);
            ViewModel tgtModel = ServiceProvider.GetService<SalesOrderDetailViewModel>();
            if (NavigateTo(tgtModel, tgtView, query, this, curView))
            {
                DataListObject list = this.obj.DetailList;
                if (list != null) list.SelectRow(row);
            }
        }

        public virtual bool lnkDetailDetails_Enabled(int row)
        {
            return true;
        }
        #endregion

        #region Link lnkDetailNew

        public virtual NameValueCollection lnkDetailNew_Params()
        {
            NameValueCollection query = new NameValueCollection();
            query.Add(ViewParams.Action.Param, ViewParams.Action.Create);
            query.Add("SalesOrderId", this.obj.SalesOrderIdProperty.EditStringValue);
            query.Add(ViewParams.Mode.Param, ViewParams.Mode.Popup);
            query.Add(ViewParams.QuerySource, "lnkDetailNew");
            return query;
        }

        public virtual void lnkDetailNew_Command(IView tgtView, IView curView)
        {
            NameValueCollection query = lnkDetailNew_Params();
            ViewModel tgtModel = ServiceProvider.GetService<SalesOrderDetailViewModel>();
            NavigateTo(tgtModel, tgtView, query, this, curView);
        }

        public virtual bool lnkDetailNew_Enabled()
        {
            return !obj.IsNew;
        }
        #endregion

        protected override void OnChildEvent(object sender, ViewEvent e)
        {
            ViewSelectionEvent selEvt = e as ViewSelectionEvent;
            ViewModel child = sender as ViewModel;
            if (selEvt != null && child != null && child.Params[ViewParams.QuerySource] == "lnkCustomerLookupLookUp")
                lnkCustomerLookupLookUp_HandleResult(sender, selEvt.SelectedRows);
            if (e.IsClosed() && child != null && child.Params[ViewParams.QuerySource] == "lnkDetailDetails")
                this.obj.DetailList.ClearSelectedRows();
            base.OnChildEvent(sender, e);
        }
    }
}