//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Service Implementations" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated
// unless they are placed between corresponding CUSTOM_CODE_START/CUSTOM_CODE_END lines.
//
// This file can be DELETED DURING REGENERATION IF NO LONGER NEEDED, e.g. if it gets renamed.
// To prevent this and preserve manual custom changes please remove the line above.
//---------------------------------------------------------------------------------------------

using AdventureWorks.Enumerations;
using AdventureWorks.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Web;
using Xomega.Framework;
using Xomega.Framework.Services;
// CUSTOM_CODE_START: add namespaces for custom code below
// CUSTOM_CODE_END

namespace AdventureWorks.Entities.Services
{
    public partial class CustomerService : ICustomerService
    {
        public CustomerService()
        {
        }

        public virtual IEnumerable<Customer_ReadListOutput> ReadList(Customer_ReadListInput_Criteria _criteria)
        {
            IEnumerable<Customer_ReadListOutput> res = null;
            using (AdventureWorksEntities ctx = new AdventureWorksEntities())
            {
                var src = from obj in ctx.Customer select obj;
                #region Source filter
                if (_criteria != null)
                {
                }
                // CUSTOM_CODE_START: add custom filter criteria to the source query for ReadList operation below
                // src = src.Where(o => o.FieldName == VALUE);
                // CUSTOM_CODE_END
                #endregion
                var qry = from obj in src
                          select new Customer_ReadListOutput() {
                              CustomerId = obj.CustomerId,
                              StoreId = obj.StoreIdObject.BusinessEntityId,
                              // CUSTOM_CODE_START: set the StoreName output parameter of ReadList operation below
                              StoreName = obj.StoreIdObject.Name, // CUSTOM_CODE_END
                              PersonId = obj.PersonIdObject.BusinessEntityId,
                              // CUSTOM_CODE_START: set the PersonName output parameter of ReadList operation below
                              PersonName = obj.PersonIdObject.LastName + ", " + obj.PersonIdObject.FirstName, // CUSTOM_CODE_END
                              AccountNumber = obj.AccountNumber,
                              TerritoryId = obj.TerritoryIdObject.TerritoryId,
                          };
                #region Result filter
                if (_criteria != null)
                {
                    if (_criteria.TerritoryId != null)
                        qry = qry.Where(o => o.TerritoryId == _criteria.TerritoryId);

                    #region PersonName
                    if (_criteria.PersonNameOperator != null)
                    {
                        switch (_criteria.PersonNameOperator)
                        {
                            case Operators.IsNull:
                                qry = qry.Where(o => o.PersonName == null); break;
                            case Operators.IsNotNull:
                                qry = qry.Where(o => o.PersonName != null); break;
                            case Operators.IsEqualTo:
                                qry = qry.Where(o => o.PersonName == _criteria.PersonName); break;
                            case Operators.IsNotEqualTo:
                                qry = qry.Where(o => o.PersonName != _criteria.PersonName); break;
                            case Operators.Contains:
                                qry = qry.Where(o => o.PersonName.Contains(_criteria.PersonName)); break;
                            case Operators.DoesNotContain:
                                qry = qry.Where(o => !o.PersonName.Contains(_criteria.PersonName)); break;
                            default:
                                ErrorList.Current.AddError("Unsupported operator {0} for the Person Name.", _criteria.PersonNameOperator); break;
                        }
                    }
                    #endregion

                    #region StoreName
                    if (_criteria.StoreNameOperator != null)
                    {
                        switch (_criteria.StoreNameOperator)
                        {
                            case Operators.IsNull:
                                qry = qry.Where(o => o.StoreName == null); break;
                            case Operators.IsNotNull:
                                qry = qry.Where(o => o.StoreName != null); break;
                            case Operators.IsEqualTo:
                                qry = qry.Where(o => o.StoreName == _criteria.StoreName); break;
                            case Operators.IsNotEqualTo:
                                qry = qry.Where(o => o.StoreName != _criteria.StoreName); break;
                            case Operators.Contains:
                                qry = qry.Where(o => o.StoreName.Contains(_criteria.StoreName)); break;
                            case Operators.DoesNotContain:
                                qry = qry.Where(o => !o.StoreName.Contains(_criteria.StoreName)); break;
                            default:
                                ErrorList.Current.AddError("Unsupported operator {0} for the Store Name.", _criteria.StoreNameOperator); break;
                        }
                    }
                    #endregion

                    #region AccountNumber
                    if (_criteria.AccountNumberOperator != null)
                    {
                        switch (_criteria.AccountNumberOperator)
                        {
                            case Operators.IsEqualTo:
                                qry = qry.Where(o => o.AccountNumber == _criteria.AccountNumber); break;
                            case Operators.IsNotEqualTo:
                                qry = qry.Where(o => o.AccountNumber != _criteria.AccountNumber); break;
                            case Operators.Contains:
                                qry = qry.Where(o => o.AccountNumber.Contains(_criteria.AccountNumber)); break;
                            case Operators.DoesNotContain:
                                qry = qry.Where(o => !o.AccountNumber.Contains(_criteria.AccountNumber)); break;
                            default:
                                ErrorList.Current.AddError("Unsupported operator {0} for the Account Number.", _criteria.AccountNumberOperator); break;
                        }
                    }
                    #endregion
                }
                // CUSTOM_CODE_START: add custom filter criteria to the result query for ReadList operation below
                // qry = qry.Where(o => o.FieldName == VALUE);
                // CUSTOM_CODE_END
                #endregion
                ErrorList.Current.AbortIfHasErrors(HttpStatusCode.BadRequest);
                res = qry.ToList();
            }
            return res;
        }
    }
}